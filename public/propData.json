{
    "greeting": "Hello, I am Yu-An, Chen!",
    "bio1": "A software Engineer",
    "bio2": "有著多年的系統整合經驗，整合機器學習演算法與開發過後端，已經幫助許多專案的達成。",
    "resumeDownload": "https://www.cakeresume.com/s--u3LSKmee4rN_6b6EolDWyQ--/a920604a",
    "projects": [
        {
            "id": "amd",
            "title": "Age-related Macular Degeneration Rehabilitation Platform",
            "date": "2022/11-2024/05",
            "category": "Work",
            "tags": [
                "C#",
                "Unity",
                "Sqlite"
            ],
            "description": {
                "background": "為了幫助黃斑部病變患者訓練第二視野中心，進而重新看清世界。",
                "challenge": "開發了一個復健平台，並整合同事的瞳孔追蹤演算法，同時需要確保系統能高效處理和儲存訓練資料。",
                "solution": "使用 Unity 開發前端介面，實現了視覺訓練平台的直觀操作界面。整合瞳孔追蹤算法於後端邏輯中。搭配 SQLite 實現資料存儲，保證了患者訓練資料的高效存取與管理。利用 System Service 實現特定功能，確保平台的穩定運行。使用 Ansible 作為自動化部署工具，實現了平台的快速、可重複性部署，大幅提高了部署過程的效率和穩定性。",
                "outcome": "成功開發出一個不僅僅是工具的復健平台，更為醫療團隊提供創新解決方案，大幅提升了患者的復健效率。"
            },
            "image": "amd_flow_chart.png",
            "reference": "",
            "repo": [
                {
                    "amd-QA": "https://github.com/a920604a/amd-deploy"
                },
                {
                    "amd-deploy": "https://github.com/a920604a/amd-integration"
                }
            ]
        },
        {
            "id": "rm2",
            "title": "Remote meeting prototype",
            "date": "2022/9-2023/11",
            "category": "Work",
            "tags": [
                "C#",
                "Unity"
            ],
            "description": {
                "background": "在遠端會議系統專案中，為了改善使用者的遠端會議體驗，實現流暢的跨語言交流。",
                "challenge": "面對語言障礙，如何讓不同語系的使用者能順暢參與會議，並且能夠有效處理會議物件和儲存會議紀錄",
                "solution": "在此專案中，我負責調用 Azure 的語音轉文字 API，將會議中的語音實時轉換為文字並儲存為會議紀錄。我還調用網站後端的 API 來處理會議物件的管理和顯示，同時實現了表情符號的即時顯示功能，提升了會議的互動性。我使用 Unity 進行跨平台兼容開發，確保系統能在不同設備間順利運行，並優化了會議物件的傳輸過程。",
                "outcome": "成功消除了語言障礙，為遠端會議系統提供更加包容的解決方案，顯著提升了使用者的會議體驗，並提供了即時、完整的會議紀錄。"
            },
            "image": "rm2.png",
            "reference": "",
            "note": ""
        },
        {
            "id": "molrx",
            "title": "協助藥物開發的使用者互動",
            "date": "2024/05-Now",
            "category": "Work",
            "tags": [
                "C#",
                "Unity"
            ],
            "description": {
                "background": "開發一個專門用於藥物開發過程的分子模擬平台，目的是提升蛋白質與分子結構的可視化效果，幫助研究人員更直觀地理解分子互動過程。",
                "challenge": "如何將複雜的藥物分子數據有效地呈現給使用者，並且確保互動過程直觀且易於理解。",
                "solution": "使用 Unity 開發虛擬實境應用，實現了藥物分子結構的視覺化，並提供了關鍵的操作功能。重要的顯示元件包括分子結構、蛋白質與藥物分子的交互作用以及相互間的動態變化。此外，為了便於日後回顧，我加入了錄影與截圖功能，能夠捕捉和存儲視覺效果以供參考。在交互操作上，實現了多種功能，如針對模型的視角切換、旋轉、放大縮小以及凸顯效果等，讓使用者能夠精確控制視覺焦點，進一步提升了對分子結構的直觀理解。",
                "outcome": "成功開發了基於 Unity 的虛擬實境應用，提升了藥物開發過程中的可視化效果，促進研究人員對分子結構的直觀理解，進而提高了研究效率。"
            },
            "image": "molrx.png",
            "reference": ""
        },
        {
            "id": "backup-start-up",
            "title": "自動化備份每月stand-up 紀錄",
            "date": "2024/10-Now",
            "category": "Misc",
            "tags": [
                "Python",
                "Airflow",
                "PostgreSQL",
                "Docker"
            ],
            "description": {
                "background": "為了提升團隊 Stand-Up 會議紀錄的管理效率，實現自動化備份機制，減少手動操作並保證數據的完整性。",
                "challenge": "如何確保會議記錄的安全保存並能夠高效存取，避免因為手動操作失誤而造成數據丟失或無法查詢的問題。",
                "solution": "使用 Airflow 作為工作流管理工具，設計並開發了自動化備份系統，將會議記錄定期備份並存儲於 PostgreSQL 資料庫中。使用 Python 編寫腳本配置 Airflow 任務排程，自動執行備份過程，並將系統部署於 Docker 容器中以提高可移植性和穩定性。這樣不僅簡化了操作流程，還確保了數據的安全性、可查詢性及高效性。",
                "outcome": "成功實現了數據備份的自動化，減少了手動操作，提高了資料的可靠性與維護性。"
            },
            "image": "backup-startup.png",
            "reference": "",
            "repo": "https://github.com/a920604a/monthly-report"
        },
        {
            "id": "remote_meeting_system",
            "title": "遠端會議系統",
            "date": "2022/12-2023/01",
            "category": "Misc",
            "tags": [
                "Shell Script",
                "Linux"
            ],
            "description": {
                "background": "協助公司主管在國外進行遠端會議時，提升會議系統的穩定性與可用性。",
                "challenge": "升級會議室設備，支持遠端視訊會議，並確保跨設備的兼容性與無縫連接。",
                "solution": "編寫 Shell Script 與 Udev 規則，定義自動化服務，提升顯示效果和解析度調整，使用 Uptime Kuma 黑箱監控與告警，確保穩定運行。",
                "outcome": "成功升級會議系統，使主管能輕鬆參與遠端會議，提升了整體會議效率和工作流的穩定性。"
            },
            "image": "meeting_room.png",
            "reference": ""
        },
        {
            "id": "aidc",
            "title": "智能缺陷檢測平台",
            "date": "2020/08-2021/01",
            "category": "Work",
            "tags": [
                "Python",
                "Flask",
                "MySQL",
                "Redis",
                "Docker"
            ],
            "description": {
                "background": "開發智能缺陷檢測平台，利用先進的影像處理技術，提升檢測精度，幫助企業在生產過程中實現高效的質量控制。",
                "challenge": "如何設計一個即時且高精度的缺陷檢測網站，並確保系統能夠處理大量數據，同時具備良好的擴展性與靈活性。",
                "solution": "整合並開發物件檢測與影像分類演算法，提升檢測精度和效率。設計並搭建高效能的後端服務，確保大數據的實時處理能力。選擇 Flask 作為後端框架，實現簡單且高效的 API 設計。使用 MySQL 進行數據存儲，保證數據的高效存取與管理。通過 Docker 實現容器化部署，提升平台的可擴展性和靈活性。",
                "outcome": "成功提升檢測系統效能，顯著縮短訓練時間並提升檢測精度，幫助企業在質量控制中取得更高效的結果，支持大規模生產需求。"
            },
            "image": "aie_adc_train.png",
            "reference": "http://www.aie-tec.com/?products_26/"
        },
        {
            "id": "clothes",
            "title": "顏色穿搭推薦",
            "date": "2024/06-2024/07",
            "category": "Side Project",
            "tags": [
                "Python",
                "FastAPI",
                "MySQL",
                "Redis",
                "Docker"
            ],
            "description": {
                "background": "開發一個穿搭推薦平台，透過演算法分析並推薦不同顏色的穿搭方案，提升穿搭決策的效率。",
                "challenge": "如何設計一個能提供個性化穿搭建議的平台，並處理大量來自不同來源的穿搭資料，同時保證推薦系統的準確性和用戶體驗。",
                "solution": "爬取並整合其他平台的公開穿搭資料，提供多樣化的穿搭參考。使用 Python 和 FastAPI 搭建高效的後端 API，實現快速的數據處理和請求響應。結合 MySQL 和 Redis，提升數據查詢的速度和可靠性，確保即時推薦的準確性。前端使用 React 實現動態交互式介面，提供直觀且用戶友好的體驗。",
                "outcome": "成功提供了個性化穿搭建議，提升用戶穿搭決策效率，增強穿搭體驗。"
            },
            "image": "clothes.png",
            "reference": "https://docs.google.com/presentation/d/1DiWmyrWgODBOlg2iwQTTcxoKf-HZ7MG8mB_UrH6xXkI/edit#slide=id.g274d6715e6a_3_772",
            "repo": "https://github.com/a920604a/clothes-outfit",
            "note": "設計了基於顏色搭配的穿搭推薦演算法，將不同風格（如簡約、工業、復古等）對應到一組顏色，根據用戶需求精準提供個性化建議，提升穿搭決策的效率"
        },
        {
            "id": "monitoring_system",
            "title": "監控系統建設",
            "date": "2024/09 - Now",
            "category": "Misc",
            "tags": [
                "Prometheus",
                "Grafana",
                "AlertManager",
                "Docker"
            ],
            "description": {
                "background": "為了提升系統的可觀察性，開發了一套基於 Prometheus、Grafana 和 AlertManager 的白箱監控系統，用於收集應用和基礎設施的指標數據，並進行實時性能監控。",
                "challenge": "如何有效地收集並可視化大量來自不同服務和系統的監控數據，並在發現異常時及時觸發告警，減少故障處理的延遲。",
                "solution": "使用 Prometheus 作為數據收集工具，將各服務的指標數據進行采集，並將其推送到 Grafana 進行可視化。Grafana 提供了實時性能數據的儀表板，幫助團隊快速定位性能問題。使用 AlertManager 配置多種告警規則，當指標超過預設閾值時，自動發送通知至相關人員，實現問題的即時響應。",
                "outcome": "成功搭建了可擴展且高效的監控系統，提升了團隊的問題響應速度，減少了故障時間，並大大提升了系統運行的穩定性。"
            },
            "image": "monitoring_system.png",
            "reference": "",
            "repo": "https://github.com/a920604a/monitoring_system",
            "note": "透過 Prometheus 與 Grafana 的集成，實現了指標數據的全面監控，並結合 AlertManager 配置高效的告警系統，有效提升了運維的管理效率。"
        },
        {
            "id": "stock-mlops",
            "title": "Stock Price Prediction with MLOps",
            "date": "2025/06-2025/08",
            "category": "Side Project",
            "tags": [
                "Python",
                "FastAPI",
                "Prefect",
                "MLflow",
                "Docker",
                "PostgreSQL",
                "ClickHouse",
                "Prometheus",
                "Grafana",
                "GitHub Actions",
                "Celery"
            ],
            "description": {
                "background": "建立一個可持續維運的股票價格預測系統，實作完整 MLOps 流程，涵蓋資料收集、特徵工程、模型訓練、部署與監控。",
                "challenge": "如何將模型訓練與預測流程自動化，同時解決模型漂移偵測、效能監控與版本管理問題。",
                "solution": "設計端到端 MLOps 架構：使用 Prefect 自動化 ETL 與訓練流程，Celery 處理異步任務（如模型訓練與批次預測），MLflow 管理實驗與模型版本，FastAPI 提供預測與訓練 API，Evidently + Prometheus + Grafana 進行資料與模型效能監控。系統以 Docker Compose 部署，結合 GitHub Actions 實現 CI/CD，確保可重現性與可維運性。",
                "outcome": "成功建立可持續維運的股票預測平台，使用者可查詢即時預測與歷史趨勢，開發者可透過監控與自動 retraining 提升模型準確度與系統穩定性。"
            },
            "image": "https://github.com/a920604a/stock-mlops/blob/main/demo/dataset.png",
            "reference": "",
            "repo": "https://github.com/a920604a/stock-mlops"
        },
        {
            "id": "llm-assistance",
            "title": "AI Research Curator with RAG",
            "date": "2025/07-Now",
            "category": "Side Project",
            "tags": [
                "Python",
                "FastAPI",
                "Prefect",
                "PostgreSQL",
                "Qdrant",
                "minIO",
                "LangChain",
                "React",
                "RAG",
                "LLM",
                "Ollama",
                "Celery"
            ],
            "description": {
                "background": "每日有數百篇 AI 論文發表，研究人員難以及時追蹤。本專案打造生產級 RAG 系統，作為 AI 論文策展與研究助理。",
                "challenge": "需要自動化處理大量 PDF、結構化解析、支援高效檢索與語意查詢，並整合 LLM 提供即時問答，同時兼顧隱私與可觀察性。",
                "solution": "構建完整 RAG 系統：Prefect 排程自動下載 arXiv PDF，Celery 處理非同步任務（PDF 解析、向量索引更新等），解析內容並儲存至 PostgreSQL、Qdrant、MinIO；利用 Qdrant（BM25 + 向量檢索）支援混合搜尋；RAG 管線整合查詢擴展、檢索與 Prompt 模板；LLM 可切換 Ollama 或 OpenAI；FastAPI 提供後端 API，React 負責前端互動。",
                "outcome": "成功建立研究人員可用的 AI 論文策展平台，自動化蒐集每日 arXiv 新論文，支援關鍵字與語意搜尋及 LLM 問答，系統具備生產等級的可維運性與可觀察性。"
            },
            "image": "",
            "reference": "",
            "repo": "https://github.com/a920604a/llm-assistant"
        },
        {
            "id": "daodao",
            "title": "協助教育網站資料重構與後端功能開發",
            "date": "2024/10-Now",
            "category": "Side Project",
            "description": {
                "background": "為了提升教育平台的資料架構與後端功能，專案致力於重構現有系統，並引入現代化的技術堆疊，以提高系統的可維護性與擴展性。​",
                "challenge": "需要整合多種資料來源，並確保資料的一致性與準確性，同時建立一個高效且可擴展的後端系統，以支援未來的功能擴展。​",
                "solution": "​採用 Python、PostgreSQL、MongoDB、Docker、FastAPI、Airflow 及 Ansible 等技術，建立一個模組化的後端架構。使用 Airflow 進行資料處理流程的自動化，確保資料的一致性與準確性。​",
                "outcome": "成功建立了一個高效且可擴展的後端系統，提升了系統的穩定性與可維護性，並為未來的功能擴展打下堅實的基礎。"
            },
            "tags": [
                "Python",
                "PostgreSQL",
                "MongoDB",
                "Docker",
                "FastAPI",
                "Airflow",
                "Ansible"
            ],
            "reference": "https://www.daoedu.tw/",
            "repo": [
                {
                    "daodao-storage：​負責處理平台的資料儲存與管理，確保資料的安全性與可用性。": "https://github.com/daodaoedu/daodao-storage"
                },
                {
                    "daodao-ai-backend：​提供 AI 功能的後端支援，以及 API 的開發。": "https://github.com/daodaoedu/daodao-ai-backend"
                },
                {
                    "daodao-ai-etl：​實現資料的提取、轉換與載入（ETL）流程，使用 Airflow 進行排程。": "https://github.com/a920604a/daodao-etl"
                }
            ]
        },
        {
            "id": "de",
            "title": "GitHub 資料分析管線",
            "date": "2025/03-Now",
            "category": "Side Project",
            "description": {
                "background": "​為了分析 GitHub 上的開源開發趨勢，專案建立了一個資料分析管線，從 GitHub 擷取資料，經過處理後，儲存至 Google BigQuery，並使用 Streamlit 建立可視化的分析介面。​",
                "challenge": "需要處理大量的 GitHub 資料，並確保資料的準確性與一致性，同時建立一個可擴展的資料處理流程，以支援未來的分析需求。​",
                "solution": "​使用 Terraform 進行基礎設施的自動化部署，並結合 PySpark 與 Airflow 進行大規模資料的處理與排程，確保資料分析的效率與準確性。​",
                "outcome": "​成功建立了一個完整的資料分析管線，提供了對 GitHub 上開源開發趨勢的深入洞察，並為未來的資料分析需求提供了堅實的基礎。"
            },
            "tags": [
                "Terraform",
                "Google Cloud Storage",
                "Google Big Query",
                "Streamlit",
                "PySpark",
                "Airflow",
                "Docker"
            ],
            "image": "de-streamlit.png",
            "reference": "https://github.com/a920604a/data-engineering-zoomcamp-2025/blob/main/project/Readme_zh.md"
        },
        {
            "id": "ebook",
            "title": "ebook-reader",
            "date": "2025/04-Now",
            "category": "Side Project",
            "tags": [
                "React",
                "supabase"
            ],
            "description": {
                "background": "為了提供一個簡單且現代化的電子書閱讀體驗，開發了一個基於 React 的電子書閱讀器。",
                "challenge": "在無後端伺服器的情況下，實現電子書的上傳、儲存與管理功能。",
                "solution": "利用 Supabase 提供的後端即服務（BaaS）功能，實現使用者認證與資料儲存，並結合 React 建立前端介面。",
                "outcome": "成功開發出一個支援電子書上傳與閱讀的應用程式，並部署至 GitHub Pages，供使用者閱讀。"
            },
            "image": "",
            "reference": "https://a920604a.github.io/ebook-reader/",
            "repo": "https://github.com/a920604a/ebook-reader",
            "note": ""
        }
    ],
    "works": [
        {
            "id": "oomii-02",
            "company": "Oomii Inc.",
            "position": "Senior Software Engineer",
            "years": "2024/05-Now",
            "description": [
                "協助團隊開發 VR 應用程式及藥物分子模擬，使用 Unity 框架和 C# 開發蛋白質視覺應用程式，實現分子結構的三維視覺化。",
                "與 Python 工程師合作，解決跨領域技術挑戰，並與設計部門和 PM 密切協作，確保專案順利推進。",
                "使用 Prometheus、Grafana 和 AlertManager 建立白箱監控系統，收集指標數據、可視化性能趨勢，並配置告警通知以實現問題的即時響應與處理。"
            ]
        },
        {
            "id": "oomii-01",
            "company": "Oomii Inc.",
            "position": "Software Engineer",
            "years": "2022/05-2024/05",
            "description": [
                "使用 Unity 框架和 C# 開發復健平台及遠端會議原型，確保無縫整合與穩健效能，並設計會議室系統提升協作體驗。",
                "與 ML 工程師合作，並與各部門協調克服挑戰並確保專案按時完成。",
                "使用 Ansible 實現跨多環境自動化部署，優化部署流程，減少部署時間和錯誤。",
                "與 UI/UX 設計師密切合作，將 Figma 設計轉化為功能性應用，提升用戶體驗。"
            ]
        },
        {
            "id": "aics",
            "company": "Asus Inc. AICS department",
            "position": "System Engineer",
            "years": "2021/11-2022/02",
            "description": [
                "負責維護並優化 ETL 流程，使用 Airflow 管理數百萬條記錄的同步與數據轉換，提升數據處理效率，並保證數據準確性與一致性。"
            ]
        },
        {
            "id": "aie",
            "company": "安智聯科技有限公司",
            "position": "Algorithm Development Engineer",
            "years": "2020/04-2021/03",
            "description": [
                "整合物件檢測和影像分類演算法，開發智能檢測平台，提升自動化檢測的準確性。",
                "負責建立高效的 Flask 網站後端，確保服務穩定。",
                "整合 MySQL 與 Redis 作為數據庫和快取系統，優化數據存儲與存取速度。",
                "利用 Docker Compose 進行容器化部署，簡化部署過程並確保系統可擴展性。"
            ]
        },
        {
            "id": "foxconn",
            "company": "FOXCONN",
            "position": "Software Engineer Intern",
            "years": "2018/07-2018/10",
            "description": [
                "應用 Python 語言，使用 TensorFlow 和 Keras 框架開發深度學習演算法。",
                "成功提升檢測系統效能，通過深度學習模型分析圖像數據，顯著提高了檢測準確率。",
                "參與數據預處理與模型訓練，對大量影像數據進行分類與檢測，達成項目目標。"
            ]
        }
    ],
    "skills": [
        {
            "name": "Python",
            "level": "70%"
        },
        {
            "name": "C#",
            "level": "80%"
        },
        {
            "name": "C++",
            "level": "50%"
        },
        {
            "name": "JavaScript",
            "level": "15%"
        }
    ],
    "tools": [
        "Git",
        "PostgreSQL",
        "MySQL",
        "SQLite",
        "MongoDB",
        "Redis",
        "Unity",
        "Figma",
        "Docker",
        "Ansible",
        "Airflow",
        "Ubuntu"
    ],
    "frameworks": [
        "React",
        "FastAPI",
        "Pytoch"
    ],
    "tryLearn": [
        "Flask",
        "Vue",
        "K8s",
        "Kafka"
    ],
    "educationData": [
        {
            "school": "Master of National Central University",
            "major": "Computer science",
            "duration": "2016-2018"
        },
        {
            "school": "Bachelor of National Central University",
            "major": "Mathematics (minor in computer)",
            "duration": "2012-2016"
        }
    ]
}